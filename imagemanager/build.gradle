plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
    id 'kotlinx-serialization'

}

def getVersionName = { ->
    return "1.0.2"
}
def getArtificatId = { -> return "core"}

def getReleaseOutputName = { -> return "imagemanager" }



android {
    compileSdk 30

    defaultConfig {
        minSdk 21
        targetSdk 30
        versionCode 1
        versionName getVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }


}

dependencies {
    api 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'com.edmodo:cropper:1.0.1'
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.0'

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation 'androidx.test:core-ktx:1.4.0'
    testImplementation "androidx.test:core-ktx:1.4.0"
    testImplementation 'androidx.test:core:1.4.0'

    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'


    testImplementation "org.robolectric:robolectric:4.6.1"

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/2bayt/imagemanagernadroid")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USER")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_PERSONAL_ACCESS_TOKEN")
            }
        }
    }
    publications {
        bar(MavenPublication) {
            groupId 'com.twobayt.imagemanager'
            artifactId getArtificatId()
            version getVersionName()
            artifact("$buildDir/outputs/aar/${getReleaseOutputName()}-release.aar")
        }
    }
}